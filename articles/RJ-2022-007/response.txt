Dear Michael Kane,

We have responded to the reviewer's comments below. The reviewer presented
three main issues. First, that the discussion of related work was not
sufficiently thorough. We agree with this point and have extended the
background section. Second, the reviewer says the narrative is jumbled and some
ideas need more explanation. This was a valid criticism and in response we have
clarified explanations across the manuscript, removed unnecessary jargon,
improved transitions between sections, and reorganized the sections into a more
logical progression. The reviewers third major criticism was that there were
possibly technical errors in two of the figures. The figures were actually
correct; we rewrote the legends to clarify the meaning.

In addition to the three major points, the reviewer had many more detailed
comments. These will be addressed case-by-base in the text below.

We would like to thank the reviewer their thoughtful comments.


> Comments on the manuscript "rmonad: Pipelines you can compute on"
> submitted to the R Journal
> 
> 
> 1 Overall reaction.
> ===================
> 
>   The work discussed in this manuscript represents a well placed
>   addition to the R ecosystem and a sound piece of scholarship worthy of
>   publication in the R Journal. There are a small number of important
>   but fixable issues, however, which prevent me from recommending this
>   manuscript be published /as is/.

>   These issues are as follows:
>   1. I feel a more complete discussion of conceptually related work is
>      required to both meet our due diligence as researchers and to give
>      context to the reader

We expanded the background section with the topics suggested by the reviewer.

>   2. The narrative seems somewhat jumbled and incomplete. Certain
>      concepts or goals are either left implicit entirely or ordered
>      within the manuscript in a way that makes following the narrative
>      somewhat difficult. This arguably includes the goal alluded to by
>      the authors in the title itself.

We have rearranged the presentation into a more logical progression and fleshed
out explanations in key areas (see detailed explanations below).

>   3. I believe there may be some narrow but important technical errors
>      in two of the figures. If the figures are correct, then they were
>      unclear enough that after studying them I believed this to be the
>      case.

The figures are correct but were insufficiently explained (see detailed explanations below).

>   Once these issues are addressed I believe this will a valuable and
>   well received entry in the R Journal.


> 2 Detailed comments
> ===================
> 
> 2.1 as_monad and related things
> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> 
> 2.1.1 semantic naming
> ---------------------
> 
>   The name of the function `as__monad` should be strongly reconsidered,
>   as the function's purpose is evaluation but the name evokes class/type
>   coercion.

I can see why the name may be confusing, so I've changed the name to
`evalwrap`. The new name captures both the act of evaluation as well as the
fact that a wrapped result is returned. The updated code is available on github
and will be released to CRAN shortly.


> 2.1.2 R → M a -------------
> 
>   This mapping seems incorrect. as_monad takes an R expression */and the
>   implicit evaluation context containing the required inputs to R/* and maps
>   that to M a so either
> 
>   as_monad :: R e → M a
> 
>   with `e` the evaluation environment where the symbols appearing in R are
>   resolved, or, at the least
> 
>   as_monad :: R R_in → M a
> 
>   with `R_in` being the input variables used by the script

The mapping is correct. The reviewer is right that the R expression may access
variables defined in scope, however it is not conventional to include the local
environment in a type signature (see the Wadler 1990 reference).

> 3 Pure functions ================
> 
> 3.1 Missing citation ~~~~~~~~~~~~~~~~~~~~
> 
>   for definition of /pure function/
>
> 3.2 Pure functions in R ~~~~~~~~~~~~~~~~~~~~~~~
> 
>   The general discussion I've been able to find regarding pure functions in R
>   seems to disregard the ability to raise warnings/errors. If it is important
>   to the point here that definition does not, the authors should state that
>   explicitly.
>
> 
> 3.3 Mathematical functions being pure ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> 
>   "The above statement is not a valid mathematical function since it has
>   effects (warnings and errors) beyond what is returned by the function."
> 
>   This statement seems to be out of context. While true, mathematical
>   functions being a requirement/desirable (or even equivalent to Pure
>   Function is) has not been mentioned.

We removed the discussion on pure functions and side-effects since they added
little to the paper. Rmonad does make functions pure with respect to exception
handling, but not in the more general way computer scientists use the term.
Since fully pure function handling, which would forbid IO such as writing
files, is certainly not a goal of rmonad, bringing up the concept is just
confusing.


> 3.4 "Purified" evaluation ~~~~~~~~~~~~~~~~~~~~~~~~~
> 
>   Missing citation to Wickham's `evaluate` package re capturing errors and
>   warnings, especially if it is what is used to achieve this internally.
>   Also, this is not what is used to implement `as_monad` but one wonders why
>   not.

There are a couple reasons why I do not use or cite the `evaluate` package:

 1. I wrote `as_monad/evalwrap` before `evaluate` was published

 2. `as_monad` uses the base R functions `capture.output`,
 `withCallingHandlers`, and `tryCatch` for exception handling. Substituting
 base functions for cleaner 3rd party functions might save a few lines of code,
 but adds an extra dependency.

 3. The `evaluate` package simplifies error/warning/message capture, but it did not invent the idea, so I do not think a citation is necessary.

 4. `evaluate` only does a small part of the work `as_monad` does.
 Specifically, it intercepts errors/warnings/messages and can time the
 function. `as_monad` also performs extensive non-standard evaluation of the
 function to extract docstrings, metadata, and post-processors.

Overall, the only overlap between `evaluate` and `as_monad` is related to
generic exception handling. I don't think it is necessary for every package
that does exception handling to cite the `evaluate` package even when they do
not use it.


> 4 Branching and Nesting =======================
> 
> 4.1 Tagging ~~~~~~~~~~~
> 
>   "An "Rmonad" object stores a directed graph of all past operations. Any of
>   these operations may be tagged, cached, and reused in a future operation."
> 
>   The above statement is not clear that it is providing a definition of
>   /tagging/, rather it appears to list 3 separate things one can do, one of
>   which, tagging, is left undefined. Further no mention of how this is done
>   is made before the `tag()` function is used in Figure 1.
> 
>   In fact, no discussion of exactly what the `tag()` function is doing is
>   provided anywhere in the manuscript. This should be remedied in such a
>   place that it provides clarity and context for discussions of code which
>   use or rely on the results of it.

This is a good point. We've rewritten the branching section to more clearly
explain the purpose of tagging. The 1st line in the 3rd paragraph now states:

    The first branching method uses the \code{tag} function to attach a label to
    the current head node and the \code{view} function to change the head node to a
    previously tagged node. An example of a branched pipeline using these function
    is shown in \figref{fig:rmonad-branch}. A node may be associated with one or
    more tags.

The 4th paragraph then shows how nodes can be associated with tag vectors in
rmonad loops and how these tag vectors can be used to flexibly access data from
any element in the loop.



> 4.2 Graph of Nested pipelines ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> 
>   The graph for the nested pipeline is extremely difficult to understand via
>   the discussion/captioning provided.
> 
>   It took me a great deal of time to infer that "-" indicates (I assume) a
>   terminal node which represent returning from the inner pipeline. Even with
>   that understanding the structure of the graph still seems wrong to me as a
>   reader. That is not to say for certain it is wrong, but if it is not, I as
>   a reader have not been given the proper instruction by the authors to
>   understand that fact.


The "-" indicates a node where the value is not cached. In this case, the
terminal node in the nested function (Level 2) is not cached since it is passed
directly to the nesting (Level 1). The graph is correct, though I can see how
it is confusing. I clarified this point in the legend and added a careful
step-by-step walkthrough of each node in the depicted pipeline.


> 4.2.1 Structure of the graph a ------------------------------
> 
>   As a reader, I do not understand why there is no <AB> node in the inner
>   pipeline, as that value (or the failure to generate it if that were to
>   occur, happens in the inner pipeline, not in the outer pipeline where the
>   sole <AB> node currently resides. It seems to me both nodes connected by
>   the red arrow should be <AB> nodes, making the red arrow represent
>   "returning from a deeper level of nesting". If not, more explanation of
>   this structure are needed, in my opinion.

The red arrow does indeed represent a return from a deeper level of nesting.
The reason the terminal node in the inner function does not also store <AB> is
simply that this would be a waste of memory. The node's "-" label indicates
that a value is not stored in the node. An value is stored in a node only if
the node is terminal at the top-level (i.e., if it is a final output of the
pipeline) or if the user indicates the value should be cached via the `tag`
function or the `%v>%` operator.

If a failure were to occur at the inner terminal node, the input to the node
("<AB") would be recorded at the inner level and the input to the outer
pipeline ("AB") would be recorded at the outer level. I have clarified this
point in the manuscript.


This issue is clarified in the rewritten legend.

> 4.2.2 The concept of inputs ---------------------------
> 
>   It is also strange, though understandably correct, that amongst all the
>   string literal inputs in the pipelines, some ("A", "<") get their own nodes
>   while others ("B", "C", ">") do not and are in essence embedded within the
>   functions represented by the edges of the graph.
> 
>   In the case of string literals this doesn't ultimately make much
>   difference, but the same would occur if these were variables, and that, it
>   seems to me, would be a much larger issue unless those are captured in a
>   way that is not reflected in this graph.

"A" and "<" are represented by their own nodes since, as left-hand values of
the `%v>%` operator, they are evaluated by `evalwrap` and wrapped in `Rmonad`
objects. If the user wanted the "A" and "B" inputs to the first paste function
to each have their own nodes, they could express this as `list(evalwrap("A"),
evalwrap("B")) %*>% paste0`.


> 4.2.3 AB -> <AB> ----------------
> 
>   The solid black edge between AB and <AB> is also confusing. I /think/ it is
>   ultimately correct because of subtleties of a non-nested graph representing
>   a nested computational sequence, but it struck me as wrong for long enough
>   I believe that discussion of calling f being represented twice in the
>   graph, one as the AB -> <AB> black edge, and once as the subgraph
>   representing the body of f, should be explicit.

The reviewer's interpretation is correct and the new legend should make this
clearer to the reader.


> 5 Things that may be missing and should be considered for inclusion
> ===================================================================
> 
> 5.1 An example/discussion of /computing on/ a pipeline
> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> 
>   The title of this manuscript explicitly claims that rmonad pipelines can be
>   meaningfully computed on, but no discussion or example of doing so is given
>   within. This should be remedied, as, in principle for now, I share the
>   authors' high valuation of the ability to meta-compute on pipelines in
>   meaningful and useful ways.


We rephrased the abstract to tie into the title of the paper with the new line:
"The resulting structure allows downstream computation on not only the final
results, but also node documentation, intermediate data, performance stats, and
any raised messages, warnings or errors".

In the `rmonad in the wild` section, we discuss the analysis that can be done on pipelines in the paragraph:

    The output of this pipeline is a single "Rmonad" object. Further
    analysis of the pipeline entails a series of queries against this returned
    object.  Warnings and messages are tabulated into an HTML report. Tagged
    summary data is extracted and used to build diagnostic figures. The primary
    results are extracted as tabular data and visualized in the final report.
    Issues with a pipeline can be identified by searching through the raised
    warnings stored in the "Rmonad" object. Debugging consists of
    identifying the node of failure, extracting the stored inputs to the
    failing node, and then stepping through the failing code.

It is this sort of computation on a pipeline that the title was intended to
refer to. Hopefully the rewritten abstract will clarify our intent.

The first three paragraphs of the conclusion are also heavily focused on
explaining how a pipeline can be computed on and why this is useful.



> 5.2 Reproduction, storage and re-execution
> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> 
>   The manuscript would benefit greatly from a discussion of storing the
>   resulting pipeline in some meaningfully useful form.
> 
>   Whether rmonad pipelines are /re-executable/ and the tooling around that
>   also warrants explicit mention in the manuscript.

Rmonad does not currently support re-executability. Adding this feature would
require handling for cache invalidation and would require a major refactor. If
there is sufficient demand within the community, this feature could be added in
the future. The change would likely have no effect on the semantics of the
package and thus would not render this paper obsolete.

I have added a paragraph to the discussion that discusses re-executability and other performance issues:

  Performance has not been a focus of \CRANpkg{rmonad} up to this point. The
  package currently lacks support for the re-use of cached values when
  pipelines are re-run. Also each evaluation step has a high overhead cost
  relative to lighter pipeline tools like \CRANpkg{magrittr}. \CRANpkg{rmonad}
  pipelines also tend to be memory intensive, since they may store many
  intermediate results and metadata in the ``Rmonad'' objects. Addressing these
  performance issues is a major goal for future work on the package.


> 5.3 Related works ~~~~~~~~~~~~~~~~~
> 
>   There are a number of areas where I believe the manuscript should more
>   carefully compare `rmonad` with existing work. These include
> 
> 
> 5.3.1 Provenance ----------------
> 
>   A number of provenance tracking system generated in the Computer Science
>   field have enough similarities that I feel they merit a mention discussion
>   here. As a starting point the authors might look at the body of work around
>   Vistrails.
> 
>   rmonad could also be used to /generate/ provenance information and graphs
>   for R-based computations, which overlaps with the trackr (Becker, Moor and
>   Lawrence's trackr, JCGS) and archivist (JSS, Biecek and Kosinski, JSS) )
>   packages.
> 
> 
> 5.3.2 CWL ---------
> 
>   The branching nature of `rmonad` pipelines strike me as meaningfully
>   similar to those generated in workflow languages. There are a number of
>   packages which integrate the Common Workflow Language (CWL) and R,
>   including sevenbridges (Xiao and Yin, Bioconductor) and tidycwl (Xiao,
>   Orphaned{CRAN}).
> 
> 
> 5.3.3 Branching computational workflow --------------------------------------
> 
>   Beyond the Workflow modeling and provenance fields in Computer Science,
>   modeling analysis as a directed graph has some precedent in the R-based
>   literature, notably including allusions in Statistical Analyses and
>   Reproducible Research (Gentleman and Temple Lang, JCGS) and in depth
>   discussion in Dynamic Documents for Data Analytic Science (Becker, thesis,
>   chapters 1-2).
> 
> 
>   There are above selections of citations/related work is not intended to be
>   exhaustive but rather illustrate areas of scholarship which I feel are
>   closely related enough to warrant at least brief mentions.


We have extended the discussion of related work in the background section to cover these topics.
