diff --git a/Proofs/2023-2/2022-202/tikka.tex b/Proofs/2023-2/2022-202/tikka.tex
index 30e9ffcc4..df7102d81 100644
--- a/Proofs/2023-2/2022-202/tikka.tex
+++ b/Proofs/2023-2/2022-202/tikka.tex
@@ -525,17 +525,17 @@ Formula: P(y|x,z)
 
 The LaTeX formatting of the formulas returned by the \code{identifiable} function enables them to be directly rendered as mathematics, for example in an R Markdown or a Sweave document. For instance, we can write an inline markdown code chunk within a mathematics environment, where we use the \code{format} method with the \code{formula} element of a \code{"query"} object.
 \begin{example}
-\(`r format(out1$formula)`\)
+\(\`{}r format(out1$formula)`\)
 \end{example}
 This would render as \(\sum_{w} P_{w,z}(y,x')P_{x}(w)P_{d}(z)P(d)\) in the document. Similarly, we could use the \code{use\_do} argument to render the formula such that the do-operator is used instead to represent the interventions.
 \begin{example}
-\(`r format(out1$formula, use_do = TRUE)`\)
+\(\`{}r format(out1$formula, use_do = TRUE)`\)
 \end{example}
 This would render as \(\sum_{w} P(y,x'|do(w,z))P(w|do(x))P(z|do(d))P(d)\).
 
 Similarly, we can also directly render \code{"counterfactual\_query"} objects into mathematics. We replace the default variable separator string, defined via the \code{var\_sep} argument, with \texttt{" \textbackslash{}\textbackslash{}wedge "} to properly render the \(\wedge\) symbol. The leading and trailing spaces are used so that the command name does not get mixed with the variable names.
 \begin{example}
-\(`r format(c1, var_sep = " \\wedge ")`\)
+\(\`{}r format(c1, var_sep = " \\wedge ")`\)
 \end{example}
 When rendered, this produces \(y_x \wedge x' \wedge z_d \wedge d\).
 
